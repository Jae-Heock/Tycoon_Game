using UnityEngine;
using System.Collections;
using static SkillData;
using System.Collections.Generic;

/// <summary>
/// 스킬 시스템의 핵심 관리자 클래스
/// 스킬의 활성화, 레벨 관리, 효과 적용을 담당
/// </summary>
public class SkillManager : MonoBehaviour
{
    [SerializeField]
    private int skillLevel = 0;            // 현재 스킬 레벨 (0부터 시작)

    public SkillData selectedSkill;        // 현재 선택된 스킬
    private Player player;                 // 플레이어 참조
    private FoodCounter foodCounter;       // 음식 카운터 참조
    private DalgonaZone dalgonaZone;       // 달고나 제작 구역 참조
    private CustomSpawner customSpawner;    // 나쁜손님 스폰 확률 조절용
    private Dictionary<SkillType, Coroutine> activeCoroutines = new();  // 활성화된 코루틴 관리

    /// <summary>
    /// 초기화: 필요한 컴포넌트 참조 설정
    /// </summary>
    private void Awake()
    {
        player = Object.FindFirstObjectByType<Player>();
        foodCounter = Object.FindFirstObjectByType<FoodCounter>();
        dalgonaZone = Object.FindFirstObjectByType<DalgonaZone>();
        customSpawner = Object.FindFirstObjectByType<CustomSpawner>();
    }

    /// <summary>
    /// 스킬 레벨 설정
    /// </summary>
    public void SetSkillLevel(int level)
    {
        skillLevel = level;
    }

    /// <summary>
    /// 스킬 활성화 및 효과 적용
    /// </summary>
    public void ActivateSkill(SkillData skillData)
    {
        selectedSkill = skillData;

        // 스킬 레벨에 따른 수치 계산
        if (skillLevel <= 0)
        {
            // 0레벨: 효과 없음
            return;
        }
        float value = skillData.values[skillLevel - 1];
        int count = skillData.counts[skillLevel - 1];

        // 이미 실행 중인 같은 타입의 스킬이 있다면 중지
        if (activeCoroutines.TryGetValue(skillData.skillType, out Coroutine running))
        {
            StopCoroutine(running);
        }

        Coroutine newRoutine = null;

        // 스킬 타입에 따른 효과 적용
        switch (skillData.skillType)
        {
            case SkillType.AutoSugar:
                newRoutine = StartCoroutine(AutoGenerateSugar(value, count));
                break;
            case SkillType.AutoDalgona:
                newRoutine = StartCoroutine(AutoGenerateDalgona(value, count));
                break;
            case SkillType.AutoCleanTrash:
                newRoutine = StartCoroutine(AutoCleanTrash(value));
                break;
            case SkillType.PlayerSpeed:
                player.SetSkillSpeed(value);
                break;
            case SkillType.CookSpeed:
                dalgonaZone.makeTime = value;
                break;
            case SkillType.AutoDelivery:
                SpawnAutoDeliveryAI(value);
                break;
            case SkillType.PlusPoint:
                player.bonusPoint = Mathf.RoundToInt(value);  // 예: 1, 2, 3
                break;
            case SkillType.ReduceBadCustomerChance:
                if (customSpawner != null)
                    customSpawner.badCustomerChance = value;
                break;
            case SkillType.AutoCleanDish:
                newRoutine = StartCoroutine(AutoCleanDish(value));
                break;
            case SkillType.AutoFlour:
                newRoutine = StartCoroutine(AutoGenerateFlour(value, count));
                break;


        }

        // 새로운 코루틴 저장
        if (newRoutine != null)
            activeCoroutines[skillData.skillType] = newRoutine;
    }

    /// <summary>
    /// 자동 설탕 생성 코루틴
    /// </summary>
    IEnumerator AutoGenerateSugar(float interval, int count)
    {
        while (true)
        {
            yield return new WaitForSeconds(interval);
            for (int i = 0; i < count; i++)
            {
                player.sugarCount++;
            }
        }
    }

    /// <summary>
    /// 자동 달고나 생성 코루틴
    /// </summary>
    IEnumerator AutoGenerateDalgona(float interval, int count)
    {
        while (true)
        {
            yield return new WaitForSeconds(interval);
            for (int i = 0; i < count; i++)
            {
                player.dalgonaCount++;
            }
        }
    }

    /// <summary>
    /// 자동 쓰레기 처리 코루틴
    /// </summary>
    IEnumerator AutoCleanTrash(float interval)
    {
        TrashZone trashZone = Object.FindFirstObjectByType<TrashZone>();

        while (true)
        {
            yield return new WaitForSeconds(interval);

            if (trashZone != null && trashZone.trashCount > 0)
            {
                trashZone.CleanOneTrash(); // ✅ 이걸 호출해야 실제 오브젝트도 파괴됨
            }
        }
    }

    IEnumerator AutoCleanDish(float interval)
    {
        DishZone dishZone = Object.FindFirstObjectByType<DishZone>();

        while (true)
        {
            yield return new WaitForSeconds(interval);

            if (dishZone != null && dishZone.currentDishCount > 0)
            {
                dishZone.CleanOneDish(); // ✅ 이걸 호출해야 실제 오브젝트도 파괴됨
            }
        }
    }

    void SpawnAutoDeliveryAI(float value)
    {
        for (int i = 0; i < value; i++)
        {
            foodCounter.SpawnNewAI();
        }

        Debug.Log($"AutoDelivery 스킬 활성화: AI {value}개 추가");
    }

// 자동 밀가루 
    IEnumerator AutoGenerateFlour(float interval, int count)
    {
        while (true)
        {
            yield return new WaitForSeconds(interval);
            for (int i = 0; i < count; i++)
            {
                player.flourCount++;
            }
        }
    }
}
